dccDropdown(),
htmlP("Select a range of years"),
dccRangeSlider(),
htmlP("Testing, testing")
), style = list('background-color'='lightgrey', 'columnCount'=1, 'width'='20%')
),
htmlDiv(
list(
htmlDiv(
list(
htmlDiv(
list(
htmlP("Histogram"),
graph_hist
), style=list('width'='100%')
),
htmlDiv(
list(
htmlP("Area chart"),
graph_area
), style=list('width'='100%')
)
), style = list('display'='flex')
),
htmlDiv(
list(
htmlDiv(
list(
htmlP('Violin graph'),
graph_violin
), style = list('width' = "100%")
),
htmlDiv(
list(
htmlP('Summary Text')
), style = list('columnCount' = 1)
)
), style = list('display'='flex')
)
# htmlDiv(
# dccMarkdown("[Data Source](https://github.com/vega/vega-datasets/blob/master/data/movies.json)")
)#, style = list('width'="30%", 'background-color'='lightgrey', 'display'='flex')
)
), style=list('display'='flex')
)
), style = list('display'='flex')
)
)
)
)
app$run_server()
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(tidyverse)
library(dplyr)
library(plotly)
library(gapminder)
library(ggplot2)
library(ggridges)
library("viridis")
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
df <- read_csv("movies.csv")
genre <- 'Comedy'
year_info <- c(1900, 1980)
options(repr.plot.width = 10, repr.plot.height = 10)
count_per_genre <- function(genre = 'Comedy', year_info = c(1950,2010)) {
# Function creates a plot of Number of movies produced vs. genre
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#install
# --------
# @Example :
#        count_per_genre('Comedy', list(1990,2010))
#        count_per_genre('Drama', c(1990,2010))
# --------
#Filtered between the dates
A <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Count number of movies per genre
A <- A %>%
drop_na(Major_Genre) %>%
group_by(Major_Genre) %>%
summarise(count_per_genre = n())
#Used for highlighting specific genre
A <- A %>%
mutate(to_highlight = ifelse(Major_Genre == genre,"Yes", "No"))
#Return the ggplot
A <- ggplot(A, aes(Major_Genre, count_per_genre, fill = to_highlight)) +
geom_bar(stat= 'identity', position = 'dodge') +
scale_fill_manual(values = c("Yes" = "orange", "No" = "Grey")) +
labs(y = "Number of movies produced", x = "", title = 'Popularity of Genres') +
coord_flip()
A <- A + theme(legend.position = 'none')
ggplotly(A)
}
count_per_genre
average_box_office <- function(genre = 'Comedy', year_info = list(1980,2010)) {
# Function creates a plot of Number of movies produced vs. genre
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#
# --------
# @Example :
#        average_box_office('Comedy', list(1990,2010))
#        average_box_office('Drama', c(1990,2010))
# --------
#Filtered between the dates
B <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Evaluate international gross, gather for tidy format
B <- B %>%
drop_na(Major_Genre) %>%
mutate(International_Gross = Worldwide_Gross - US_Gross) %>%
select(Major_Genre, year, US_Gross, International_Gross) %>%
gather(key = 'Gross', value = 'amount', -Major_Genre, -year) %>%
group_by(year, Gross) %>%
summarise(amount = mean(amount))
#Return the ggplot
B_plot <- ggplot(B, aes(year, amount, fill = Gross)) +
geom_area() +
labs(x = "Year", y = 'Dollars', title = 'Average box office')
B_plot <- B_plot + theme(legend.position = 'bottom')
B_plot
ggplotly(B_plot)  %>%
layout(legend = list(
orientation = "h",
y = 1
)
)
}
violinplot <- function(genre = 'Comedy', year_info = list(1950,2010)) {
# Function creates a violin plot of profit ratio vs. IMDB rating
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#
# --------
# @Example :
#        heatmap('Comedy', list(1990,2010))
#        heatmap('Drama', c(1990,2010))
# --------
#Filtered between the dates
C <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Evaluate international gross, gather for tidy format
C <- C %>%
drop_na(Major_Genre) %>%
subset(profit_ratio <= 20)
#Return the ggplot
C_plot <- ggplot(C, aes(x = Major_Genre,
y = IMDB_Rating,
fill = profit_ratio
)) +
geom_violin(position = 'dodge') +
#scale_fill_viridis(option = 'plasma', name = 'Profit ratio') +
labs(y = 'IMDB rating',
x = "",
title = 'Critical reception vs. Genre',
legend = 'Profit ratio') +
theme_bw() +
coord_flip()
ggplotly(C_plot, width=750)
}
violinplot()
histogram <- count_per_genre(genre, year_info)
graph_hist <- dccGraph(id='histogram',
figure=histogram)
area <- average_box_office()
graph_area <- dccGraph(id='area',
figure=area)
violin <- violinplot()
graph_violin <- dccGraph(id='violin',
figure=violin)
count_per_genre(genre, year_info)
app$layout(
htmlDiv(
list(
htmlDiv(
list(
htmlH3("Logo here"),
htmlH1("Interactive Movie DashBoard"),
htmlImg(height = 200, src="https://coda.newjobs.com/api/imagesproxy/ms/niche/images/can/film.jpg", style = list('bottom'='0px', 'z-index'='99px', "opacity"="0.5", 'bottom'='5px'))
), style = list('columnCount'=3, 'background-color'= 'black', 'color'='white')
),
htmlDiv(
list(
htmlDiv(
list(
htmlDiv(
list(
htmlP("Select a genre from the dropdown:"),
dccDropdown(),
htmlP("Select a range of years"),
dccRangeSlider(),
htmlP("Testing, testing")
), style = list('background-color'='lightgrey', 'columnCount'=1, 'width'='20%')
),
htmlDiv(
list(
htmlDiv(
list(
htmlDiv(
list(
htmlP("Histogram"),
graph_hist
), style=list('width'='100%')
),
htmlDiv(
list(
htmlP("Area chart"),
graph_area
), style=list('width'='100%')
)
), style = list('display'='flex')
),
htmlDiv(
list(
htmlDiv(
list(
htmlP('Violin graph'),
graph_violin
), style = list('width' = "100%")
),
htmlDiv(
list(
htmlP('Summary Text')
), style = list('columnCount' = 1)
)
), style = list('display'='flex')
)
# htmlDiv(
# dccMarkdown("[Data Source](https://github.com/vega/vega-datasets/blob/master/data/movies.json)")
)#, style = list('width'="30%", 'background-color'='lightgrey', 'display'='flex')
)
), style=list('display'='flex')
)
), style = list('display'='flex')
)
)
)
)
app$run_server()
graph_hist <- dccGraph(id='histogram',
figure=histogram)
histogram <- count_per_genre(genre, year_info)
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(tidyverse)
library(dplyr)
library(plotly)
library(gapminder)
library(ggplot2)
library(ggridges)
library("viridis")
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
df <- read_csv("movies.csv")
genre <- 'Comedy'
year_info <- c(1900, 1980)
options(repr.plot.width = 10, repr.plot.height = 10)
setwd("~/Desktop/MDS_Labs/Block3/532/DSCI532_group214_movies_R")
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(tidyverse)
library(dplyr)
library(plotly)
library(gapminder)
library(ggplot2)
library(ggridges)
library("viridis")
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
df <- read_csv("movies.csv")
genre <- 'Comedy'
year_info <- c(1900, 1980)
options(repr.plot.width = 10, repr.plot.height = 10)
count_per_genre <- function(genre = 'Comedy', year_info = c(1950,2010)) {
# Function creates a plot of Number of movies produced vs. genre
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#install
# --------
# @Example :
#        count_per_genre('Comedy', list(1990,2010))
#        count_per_genre('Drama', c(1990,2010))
# --------
#Filtered between the dates
A <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Count number of movies per genre
A <- A %>%
drop_na(Major_Genre) %>%
group_by(Major_Genre) %>%
summarise(count_per_genre = n())
#Used for highlighting specific genre
A <- A %>%
mutate(to_highlight = ifelse(Major_Genre == genre,"Yes", "No"))
#Return the ggplot
A <- ggplot(A, aes(Major_Genre, count_per_genre, fill = to_highlight)) +
geom_bar(stat= 'identity', position = 'dodge') +
scale_fill_manual(values = c("Yes" = "orange", "No" = "Grey")) +
labs(y = "Number of movies produced", x = "", title = 'Popularity of Genres') +
coord_flip()
A <- A + theme(legend.position = 'none')
ggplotly(A)
}
count_per_genre
average_box_office <- function(genre = 'Comedy', year_info = list(1980,2010)) {
# Function creates a plot of Number of movies produced vs. genre
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#
# --------
# @Example :
#        average_box_office('Comedy', list(1990,2010))
#        average_box_office('Drama', c(1990,2010))
# --------
#Filtered between the dates
B <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Evaluate international gross, gather for tidy format
B <- B %>%
drop_na(Major_Genre) %>%
mutate(International_Gross = Worldwide_Gross - US_Gross) %>%
select(Major_Genre, year, US_Gross, International_Gross) %>%
gather(key = 'Gross', value = 'amount', -Major_Genre, -year) %>%
group_by(year, Gross) %>%
summarise(amount = mean(amount))
#Return the ggplot
B_plot <- ggplot(B, aes(year, amount, fill = Gross)) +
geom_area() +
labs(x = "Year", y = 'Dollars', title = 'Average box office')
B_plot <- B_plot + theme(legend.position = 'bottom')
B_plot
ggplotly(B_plot)  %>%
layout(legend = list(
orientation = "h",
y = 1
)
)
}
violinplot <- function(genre = 'Comedy', year_info = list(1950,2010)) {
# Function creates a violin plot of profit ratio vs. IMDB rating
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#
# --------
# @Example :
#        heatmap('Comedy', list(1990,2010))
#        heatmap('Drama', c(1990,2010))
# --------
#Filtered between the dates
C <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Evaluate international gross, gather for tidy format
C <- C %>%
drop_na(Major_Genre) %>%
subset(profit_ratio <= 20)
#Return the ggplot
C_plot <- ggplot(C, aes(x = Major_Genre,
y = IMDB_Rating,
fill = profit_ratio
)) +
geom_violin(position = 'dodge') +
#scale_fill_viridis(option = 'plasma', name = 'Profit ratio') +
labs(y = 'IMDB rating',
x = "",
title = 'Critical reception vs. Genre',
legend = 'Profit ratio') +
theme_bw() +
coord_flip()
ggplotly(C_plot, width=750)
}
violinplot()
histogram <- count_per_genre(genre, year_info)
graph_hist <- dccGraph(id='histogram',
figure=histogram)
area <- average_box_office()
graph_area <- dccGraph(id='area',
figure=area)
violin <- violinplot()
graph_violin <- dccGraph(id='violin',
figure=violin)
count_per_genre(genre, year_info)
app$layout(
htmlDiv(
list(
htmlDiv(
list(
htmlH3("Logo here"),
htmlH1("Interactive Movie DashBoard"),
htmlImg(height = 200, src="https://coda.newjobs.com/api/imagesproxy/ms/niche/images/can/film.jpg", style = list('bottom'='0px', 'z-index'='99px', "opacity"="0.5", 'bottom'='5px'))
), style = list('columnCount'=3, 'background-color'= 'black', 'color'='white')
),
htmlDiv(
list(
htmlDiv(
list(
htmlDiv(
list(
htmlP("Select a genre from the dropdown:"),
dccDropdown(),
htmlP("Select a range of years"),
dccRangeSlider(),
htmlP("Testing, testing")
), style = list('background-color'='lightgrey', 'columnCount'=1, 'width'='20%')
),
htmlDiv(
list(
htmlDiv(
list(
htmlDiv(
list(
htmlP("Histogram"),
graph_hist
), style=list('width'='100%')
),
htmlDiv(
list(
htmlP("Area chart"),
graph_area
), style=list('width'='100%')
)
), style = list('display'='flex')
),
htmlDiv(
list(
htmlDiv(
list(
htmlP('Violin graph'),
graph_violin
), style = list('width' = "100%")
),
htmlDiv(
list(
htmlP('Summary Text')
), style = list('columnCount' = 1)
)
), style = list('display'='flex')
)
# htmlDiv(
# dccMarkdown("[Data Source](https://github.com/vega/vega-datasets/blob/master/data/movies.json)")
)#, style = list('width'="30%", 'background-color'='lightgrey', 'display'='flex')
)
), style=list('display'='flex')
)
), style = list('display'='flex')
)
)
)
)
app$run_server()
