fill = Worldwide_Gross
#fill
)) +
geom_violin(position = 'dodge') +
#scale_fill_viridis(option = 'plasma', name = 'Profit ratio') +
labs(x = 'IMDB rating',
y = 'Genre',
title = 'Critical reception vs. Genre',
legend = 'Profit ratio') +
theme_bw(20) +
coord_flip()
ggplotly(C_plot, width = 1000, height = 700)
}
violinplot()
violinplot <- function(genre = 'Comedy', year_info = list(1950,2010)) {
# Function creates a violin plot of profit ratio vs. IMDB rating
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#
# --------
# @Example :
#        heatmap('Comedy', list(1990,2010))
#        heatmap('Drama', c(1990,2010))
# --------
#Filtered between the dates
C <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Evaluate international gross, gather for tidy format
C <- C %>%
drop_na(Major_Genre) %>%
subset(profit_ratio <= 20)
#Return the ggplot
C_plot <- ggplot(C, aes(x = Major_Genre,
y = IMDB_Rating,
color = profit_ratio,
fill = profit_ratio
#fill
)) +
geom_violin(position = 'dodge') +
#scale_fill_viridis(option = 'plasma', name = 'Profit ratio') +
labs(x = 'IMDB rating',
y = 'Genre',
title = 'Critical reception vs. Genre',
legend = 'Profit ratio') +
theme_bw(20) +
coord_flip()
ggplotly(C_plot, width = 1000, height = 700)
}
violinplot()
violinplot <- function(genre = 'Comedy', year_info = list(1950,2010)) {
# Function creates a violin plot of profit ratio vs. IMDB rating
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#
# --------
# @Example :
#        heatmap('Comedy', list(1990,2010))
#        heatmap('Drama', c(1990,2010))
# --------
#Filtered between the dates
C <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Evaluate international gross, gather for tidy format
C <- C %>%
drop_na(Major_Genre) %>%
subset(profit_ratio <= 20)
#Return the ggplot
C_plot <- ggplot(C, aes(x = Major_Genre,
y = IMDB_Rating,
fill = profit_ratio
)) +
geom_violin(position = 'dodge') +
#scale_fill_viridis(option = 'plasma', name = 'Profit ratio') +
labs(y = 'IMDB rating',
title = 'Critical reception vs. Genre',
legend = 'Profit ratio') +
theme_bw(20) +
coord_flip()
ggplotly(C_plot, width = 1000, height = 700)
}
violinplot()
violinplot <- function(genre = 'Comedy', year_info = list(1950,2010)) {
# Function creates a violin plot of profit ratio vs. IMDB rating
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#
# --------
# @Example :
#        heatmap('Comedy', list(1990,2010))
#        heatmap('Drama', c(1990,2010))
# --------
#Filtered between the dates
C <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Evaluate international gross, gather for tidy format
C <- C %>%
drop_na(Major_Genre) %>%
subset(profit_ratio <= 20)
#Return the ggplot
C_plot <- ggplot(C, aes(x = Major_Genre,
y = IMDB_Rating,
fill = profit_ratio
)) +
geom_violin(position = 'dodge') +
#scale_fill_viridis(option = 'plasma', name = 'Profit ratio') +
labs(y = 'IMDB rating',
x = "",
title = 'Critical reception vs. Genre',
legend = 'Profit ratio') +
theme_bw(20) +
coord_flip()
ggplotly(C_plot, width = 1000, height = 700)
}
violinplot()
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(tidyverse)
library(dplyr)
library(plotly)
library(gapminder)
library(ggplot2)
library(ggridges)
library("viridis")
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
df <- read_csv("movies.csv")
genre <- 'Comedy'
year_info <- c(1900, 1980)
options(repr.plot.width = 10, repr.plot.height = 10)
count_per_genre <- function(genre = 'Comedy', year_info = c(1950,2010)) {
# Function creates a plot of Number of movies produced vs. genre
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#install
# --------
# @Example :
#        count_per_genre('Comedy', list(1990,2010))
#        count_per_genre('Drama', c(1990,2010))
# --------
#Filtered between the dates
A <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Count number of movies per genre
A <- A %>%
drop_na(Major_Genre) %>%
group_by(Major_Genre) %>%
summarise(count_per_genre = n())
#Used for highlighting specific genre
A <- A %>%
mutate(to_highlight = ifelse(Major_Genre == genre,"Yes", "No"))
#Return the ggplot
A <- ggplot(A, aes(Major_Genre, count_per_genre, fill = to_highlight)) +
geom_bar(stat= 'identity', position = 'dodge') +
scale_fill_manual(values = c("Yes" = "orange", "No" = "Grey"), guide = FALSE) +
labs(y = "Number of movies produced", x = "", title = 'Popularity of Genres') +
coord_flip() +
theme_bw(20)
ggplotly(A, width = 1000, height = 700)
}
average_box_office <- function(genre = 'Comedy', year_info = list(1980,2010)) {
# Function creates a plot of Number of movies produced vs. genre
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#
# --------
# @Example :
#        average_box_office('Comedy', list(1990,2010))
#        average_box_office('Drama', c(1990,2010))
# --------
#Filtered between the dates
B <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Evaluate international gross, gather for tidy format
B <- B %>%
drop_na(Major_Genre) %>%
mutate(International_Gross = Worldwide_Gross - US_Gross) %>%
select(Major_Genre, year, US_Gross, International_Gross) %>%
gather(key = 'Gross', value = 'amount', -Major_Genre, -year) %>%
group_by(year, Gross) %>%
summarise(amount = mean(amount))
#Return the ggplot
B_plot <- ggplot(B, aes(year, amount, fill = Gross)) +
geom_area() +
labs(x = "Year", y = 'Dollars', title = 'Average box office')  +
theme_bw(20)
ggplotly(B_plot, width = 1000, height = 700)
}
violinplot <- function(genre = 'Comedy', year_info = list(1950,2010)) {
# Function creates a violin plot of profit ratio vs. IMDB rating
# in between years
#
# --------
# @param :
#        genre : provide a genre to highlight
#        year_info : provide a list/vector with 2 values
#                    which give the start and end year to sort by
#
# --------
# @Return :
#        a plot of 'Genre' vs. 'Number of movies produced'
#
# --------
# @Example :
#        heatmap('Comedy', list(1990,2010))
#        heatmap('Drama', c(1990,2010))
# --------
#Filtered between the dates
C <- df %>% filter(between(df$year,
as.integer(year_info[1]),
as.integer(year_info[2])))
#Evaluate international gross, gather for tidy format
C <- C %>%
drop_na(Major_Genre) %>%
subset(profit_ratio <= 20)
#Return the ggplot
C_plot <- ggplot(C, aes(x = Major_Genre,
y = IMDB_Rating,
fill = profit_ratio
)) +
geom_violin(position = 'dodge') +
#scale_fill_viridis(option = 'plasma', name = 'Profit ratio') +
labs(y = 'IMDB rating',
x = "",
title = 'Critical reception vs. Genre',
legend = 'Profit ratio') +
theme_bw(20) +
coord_flip()
ggplotly(C_plot, width = 1000, height = 700)
}
violinplot()
histogram <- count_per_genre(genre, year_info)
graph_hist <- dccGraph(id='histogram',
figure=histogram)
area <- average_box_office()
graph_area <- dccGraph(id='area',
figure=area)
violin <- violinplot()
graph_violin <- dccGraph(id='violin',
figure=violin)
count_per_genre(genre, year_info)
app$layout(
htmlDiv(
list(
htmlH1("Test title"),
htmlH2('Test H2'),
graph_hist,
graph_area,
graph_violin,
htmlDiv(),
dccMarkdown("[Data Source](https://github.com/vega/vega-datasets/blob/master/data/movies.json)")
)
)
)
app$run_server()
gpa_data <- read_csv("gpa_data.csv")
brain_data <- read_csv("brain_data.csv")
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
)) %>%
filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
model_2a <- lm(speed ~ training_miles, data = marathon)
summary(model_2a)
N <- 5000
boot_fits <- marathon %>%
rsample::bootstraps(times = N) %>%
mutate(
lm   = map(splits, ~ lm(univ_gpa ~ high_gpa, data = analysis(.x))),
tidy = map(lm, broom::tidy)
) %>%
select(-splits, -lm) %>%
unnest(tidy) %>%
filter(term == "high_gpa") %>%
select(-term)
N <- 5000
boot_fits <- marathon %>%
rsample::bootstraps(times = N) %>%
mutate(
lm   = map(splits, ~ lm(speed ~ training_miles, data = marathon(.x))),
tidy = map(lm, broom::tidy)
) %>%
select(-splits, -lm) %>%
unnest(tidy) %>%
filter(term == "high_gpa") %>%
select(-term)
N <- 5000
boot_fits <- marathon %>%
rsample::bootstraps(times = N) %>%
mutate(
lm   = map(splits, ~ lm(speed ~ training_miles, data = analysis(.x))),
tidy = map(lm, broom::tidy)
) %>%
select(-splits, -lm) %>%
unnest(tidy) %>%
filter(term == "high_gpa") %>%
select(-term)
ggplot(boot_fits, aes(estimate)) +
geom_histogram(bins = 30) +
xlab(expression(Estimate~of~beta[1]))
## Attribution: DSCI 561 Lab 2
N <- 5000
boot_fits <- marathon %>%
rsample::bootstraps(times = N) %>%
mutate(
lm   = map(splits, ~ lm(speed ~ training_miles, data = analysis(.x))),
tidy = map(lm, broom::tidy)
) %>%
select(-splits, -lm) %>%
unnest(tidy) %>%
filter(term == "training_miles") %>%
select(-term)
ggplot(boot_fits, aes(estimate)) +
geom_histogram(bins = 30) +
xlab(expression(Estimate~of~beta[1]))
## Attribution: DSCI 561 Lab 2
boot_fits
model_2a$coefficients[2]
T_stars <- (boot_fits$estimate - model_2a$coefficients[2])/boot_fits$std.error
T_stars
mean(T_stars)
abs(-2)
model_2a
tidy(model_2a)
T_stars
boot_fits$std.error
boot_fits$statistic
boot_fits$estimate - model_2a$coefficients[2]
boot_fits$estimate[1] - model_2a$coefficients[2]
(boot_fits$estimate[1] - model_2a$coefficients[2])/boot_fits$std.error
(boot_fits$estimate[1] - model_2a$coefficients[2])/boot_fits$std.error[1]
T_stars
max(T_stars)
model_2a
model_2a
model_2a$coefficients
tidy(model_2a)
model_2a$terms
tidy(model_2a)$coef[,3]
summaryy(model_2a)$coef[,3]
summary(model_2a)$coef[,3]
summary(model_2a)$coef[,3][2]
summary(model_2a)$coef[,3][[2]]
sum(abs(T_star) > abs(summary(model_2a)$coef[,3][[2]]))
sum(abs(T_stars) > abs(summary(model_2a)$coef[,3][[2]]))
length(boot_fits)
length(T_stars)
boot_fits
T_stars <- (boot_fits$estimate - model_2a$coefficients[2])/boot_fits$std.error
p_val <- (1 + sum(abs(T_stars) > abs(summary(model_2a)$coef[,3][[2]]))) / (1 + length(T_stars))
boot_fits
T_stars <- (boot_fits$estimate - model_2a$coefficients[2])/boot_fits$std.error
p_val <- (1 + sum(abs(T_stars) > abs(summary(model_2a)$coef[,3][[2]]))) / (1 + length(T_stars))
p_val
min(T_stars)
X <- c(brain_data$body_wgt, 1)
X
c(rep(1, length(brain_data$brain_wgt)))
X <- matrix(brain_data$body_wgt, c(rep(1, length(brain_data$body_wgt)))
X <- matrix(brain_data$body_wgt, c(rep(1, length(brain_data$body_wgt))))
X <- matrix(brain_data$body_wgt, c(rep(1, length(brain_data$body_wgt))))
X
X <- matrix(brain_data$body_wgt, c(rep(1, length(brain_data$body_wgt))), ncol = 2)
X <- matrix(brain_data$body_wgt, c(rep(1, length(brain_data$body_wgt))), ncol = 2, nrow = 59)
X
X <- matrix(brain_data$body_wgt, c(rep(1, length(brain_data$body_wgt))), byrow = FALSE)
X
X <- matrix(brain_data$body_wgt, c(rep(1, length(brain_data$body_wgt))), byrow = FALSE, ncol = 2)
length(brain_data$body_wgt)
ones <- c(rep(1, length(brain_data$body_wgt))
X <- matrix(brain_data$body_wgt), byrow = FALSE, ncol = 2)
ones <- c(rep(1, length(brain_data$body_wgt)))
ones
X <- matrix(brain_data$body_wgt), ones, byrow = FALSE, ncol = 2)
X <- matrix(brain_data$body_wgt, ones, byrow = FALSE, ncol = 2)
ones <- c(rep(1, length(brain_data$body_wgt)))
X <- matrix(brain_data$body_wgt, ones, byrow = TRUE, ncol = 2)
y <- brain_data$brain_wgt
epsilon <-
X <- matrix(brain_data$body_wgt, ones, byrow = TRUE, ncol = 2)
ones <- c(rep(1, length(brain_data$body_wgt)))
X <- matrix(brain_data$body_wgt, ones, byrow = TRUE)
y <- brain_data$brain_wgt
X
X <- matrix(brain_data$body_wgt, ones, bycol = TRUE)
X <- matrix(brain_data$body_wgt, ones, nrow=length(brain_data$body_weight), ncol = 2, byrow = TRUE)
X <- matrix(c(brain_data$body_wgt, ones), nrow=length(brain_data$body_weight), ncol = 2, byrow = TRUE)
X <- matrix(c(brain_data$body_wgt, ones), nrow=length(brain_data$body_weight), ncol = 2)
X <- matrix(c(brain_data$body_wgt, ones), nrow=length(brain_data$body_wgt), ncol = 2)
X
ones <- c(rep(1, length(brain_data$body_wgt)))
X <- matrix(c(brain_data$body_wgt, ones), nrow=length(brain_data$body_wgt), ncol = 2)
y <- brain_data$brain_wgt
t(X) %*% y
solve(t(X) %*% X) %*% t(X)%*%y
tidy(model_2a)
first %*% second
first <- solve(t(X) %*% X)
second <- t(X)%*%y
first %*% second
solve(t(X) %*% X) %*%t(X)%*%y
model_2a
lm(brain_wgt ~ cody_wgt, data = brain_data)
lm(brain_wgt ~ body_wgt, data = brain_data)
model_4a <- lm(Sepal.Width ~ Sepal.Length + Species, data = iris)
model_4a
model_4a <- lm(Sepal.Width ~ Sepal.Length * Species, data = iris)
tidy(model_4a)
onfint_tidy(model_4a)
confint_tidy(model_4a)
tidy(model_4a)
tidy(model_4a, conf.int = TRUE)
model_4a <- lm(Sepal.Width ~ Sepal.Length * Species - 1, data = iris)
tidy(model_4a, conf.int = TRUE)
model_4a <- lm(Sepal.Width ~ Sepal.Length * Species, data = iris)
tidy(model_4a, conf.int = TRUE)
model_4a <- lm(Sepal.Width ~ Sepal.Length + Species + Sepal.Length * Species, data = iris)
tidy(model_4a, conf.int = TRUE)
model_4a <- lm(Sepal.Width ~ Sepal.Length + Sepal.Length * Species, data = iris)
tidy(model_4a, conf.int = TRUE)
model_4a <- lm(Sepal.Width ~ Sepal.Length * Species, data = iris)
tidy(model_4a, conf.int = TRUE)
iris
tibble('Sepal.Length' ~ 5.0, 'Species' ~ 'setosa)
tibble('Sepal.Length' ~ 5.0, 'Species' ~ 'setosa)
tibble('Sepal.Length' ~ 5.0, 'Species' ~ 'setosa)
)
''
'
tibble('Sepal.Length' ~ 5.0, 'Species' ~ 'setosa')
tibble('Sepal.Length' = 5.0, 'Species' = 'setosa')
predict(model_4a, newdata = temp_tibble, interval = 'confidence')
temp_tibble <- tibble('Sepal.Length' = 5.0, 'Species' = 'setosa')
predict(model_4a, newdata = temp_tibble, interval = 'confidence')
```{r 4c}
predict(model_4a, newdata = temp_tibble, interval = 'prediction')
model_5a <- lm(univ_gpa ~ high_gpa + math_sat + verb_sat)
model_5a <- lm(univ_gpa ~ high_gpa + math_sat + verb_sat, data = gpa_data)
df <- data.frame(model_5a)
model_5a
model_5a$coefficients
model_5a %>% ggplot() %>% geom_tile
model_5a %>% ggplot() + geom_tile
model_5a %>%
ggplot(aes(x = model_5a$coefficients[2:4], y = model_5a$coefficients[2:4])) +
geom_tile
model_5a$coefficients[2:4]
model_5a %>%
ggplot(aes(x = model_5a$coefficients[[2:4]], y = model_5a$coefficients[[2:4]])) +
geom_tile
model_5a$coefficients[[2:4]]
model_5a$coefficients[2:4]
model_5a %>%
ggplot(aes(x = model_5a$coefficients[2:4], y = model_5a$coefficients[2:4])) +
geom_tile()
